/*!
 * \mainpage Dia Developer Documentation

This documentation is describing some of the internal structure of the 
Dia application for sofware developers intersted in extending it. 

Dia is a highly extensible application. There are plugin mechanism to add
diagram objects by 
 - C plug-ins (\ref Objects) 
 - and by XML files (\ref Shapes).

Import and export facilties of Dia can be extended by plug-ins 
 - written in C/C++ (\ref Plugins) 
 - and Python (\ref PyDia).

Additionally there is the possibility to extend Dia with arbitrary
functionality by registering actions in the menu. Again by
 - writing plug-ins in C/C++ (e.g. \ref LayoutPlugin)
 - or with Python (\ref PyDia)

 */

/*!
\defgroup Plugins Import, Export and other extensions

 */

/*!
\defgroup ExportFilters Export Filters for various Formats
\ingroup Plugins


 */
 
/*!
\defgroup ImportFilters Import Filters for various Formats
\ingroup Plugins


 */
 
/*!
\defgroup PyDia Extending Dia with Python
\ingroup Plugins

The documentation of PyDia is self-contained with PyDia. You can use some
example PyDia plug-ins to generate it from your local Dia installtion
(if build with Python support)

\image html PyDiaObjects.svg "PyDia Object Model" width=10cm

 */

/*!
\defgroup Objects Objects and their Building Blocks

There are a bunch of services to help implementing Dia objects.

 - arrows: \ref ObjectArrows
 - connectionpoint and handle: \ref ObjectConnects
 - bounding box calculation: \ref bbox
 - text editing: to render in canvas text and allow it's editing
 - font: \ref FontServices
 - object change: \ref _ObjectChange
 - StdProps: \ref StdProps
 - load/save:

 */
 
/*!
\defgroup StdProps Property System for Dia Object
\ingroup Objects

The Propery System for Dia Object allows to 
 - describe type, range and user interface representation, see PropDescription.
 - build dynamic user interfaces for all object properties
 - transform data fields of DiaObject implementation into list of generic Property
   to allow editing including undo/redo support without writing object specific code

 */
 
/*!
\defgroup ObjectParts Building Blocks
\ingroup Objects

*/

/*!
\defgroup Objects Objects and their Building Blocks

There are a bunch of services to help implementing Dia objects.

 - arrows: \ref ObjectArrows
 - connectionpoint and handle: \ref ObjectConnects
 - bounding box calculation: \ref bbox
 - text editing: to render in canvas text and allow it's editing
 - font: \ref FontServices
 - object change: \ref _ObjectChange
 - StdProps: \ref StdProps
 - load/save:

 */
 
/*!
\defgroup StdProps Property System for Dia Object
\ingroup Objects

The Propery System for Dia Object allows to 
 - describe type, range and user interface representation, see PropDescription.
 - build dynamic user interfaces for all object properties
 - transform data fields of DiaObject implementation into list of generic Property
   to allow editing including undo/redo support without writing object specific code

 */
 
/*!
\defgroup ObjectParts Building Blocks
\ingroup Objects

*/

/*!
\defgroup ObjectConnects Connecting Objects
\ingroup Objects

There are two specialized objects involved in building a connection. One is a Handle, the other one 
is a ConnectionPoint. In an existing connection between two DiaObject the Handle belongs to the 
first ("connected to") and the ConnectionPoint belongs to second ("connected by").

The "Standard - Line" DiaObject is special because it is one of only few objects which can be 
"connected to" (has Handles) and also "connected by" (has a ConnectionPoint). 
Note: there is an important difference between the active and the passive form.

It is important to understand the difference Dia's source is making between handle->connected_to 
and "connected by" (connectionpoint->connected). The former is a 0 or 1 relation, the latter is 0..n.
*/

/*!
\defgroup Shapes Custom Shape Definition
\ingroup Objects

\verbinclude custom-shapes

*/

/*!
\defgroup ObjectConnects Connecting Objects
\ingroup Objects

There are two specialized objects involved in building a connection. One is a Handle, the other one 
is a ConnectionPoint. In an existing connection between two DiaObject the Handle belongs to the 
first ("connected to") and the ConnectionPoint belongs to second ("connected by").

The "Standard - Line" DiaObject is special because it is one of only few objects which can be 
"connected to" (has Handles) and also "connected by" (has a ConnectionPoint). 
Note: there is an important difference between the active and the passive form.

It is important to understand the difference Dia's source is making between handle->connected_to 
and "connected by" (connectionpoint->connected). The former is a 0 or 1 relation, the latter is 0..n.
*/

/*!
\defgroup Shapes Custom Shape Definition
\ingroup Objects

\verbinclude custom-shapes

*/

/*!
\defgroup Renderers Rendering Objects
\ingroup Plugins

Dia Objects are drawing themselves to a renderer, be it for display, print or
file export to various formats.  The Dia library includes some base classes 
to help implementing rendering.

 - _DiaRenderer : implementing the interface to all renderers and some emulations
   of high level functions 
 - _DiaSvgRenderer : to create SVG format for SVG export and Shape creation
 - _DiaGdkRenderer : the _DiaGdkRenderer is the first display renderer

 */
